class PointIn3D < handle{
		properties: trueCoordinates
					noisyCoordinates
					id
					noiseModel
					
		methods:	PointIn3D()	// initialize random coordinates
					addNoise(noiseModel)	// corrupt points with noise and noisModel
					getTrueCoordinates()
					getNoisyCoordinates()
					setTrueCoordinates()
					setNoisyCoordinates()
					loadParameters(paramterFileDirectory)
}
					
class PointIn2D < handle {
		properties:	projectedCoordinates
					noisyCoordinates
					id
					noiseModel
		
		methods:	getProjectedCoordinates()	// get 2D projection of noisy 3D points
					getNoisyCoordinates()	// get 2D projection with pixel noise
					setProjectedCoordinates()	// camera sets projection of 3D points
					setNoisyCoordinates()	// camera corrupts 2D correspondencies with pixel noise
					loadParameters(paramterFileDirectory)
}

class Camera < handle {
		properties:	truePose	// true pose of the camera, 4x4 matrix
					estimatedPose // pose estimated by 3D-2D point correspondencies, 4x4 matrix
					f	// focal length
					kx	// pixel per unit length in x-direction
					ky	// pixel per unit length in y-direction
					xResolution
					yResolution
					x0	// pixel x-coordinate of principle point
					y0	// pixel y-coordinate of principle point
					K	// calibration matrix
					distortionModel	// [r;kappaVector]
					perspectiveNPointAlgorithm
					
					pointCloud3D@PointIn3D	// array of type PointIn3D, stores all 3d points
					pointCloud2D@PointIn2D	// array of type PointIn2D, stores all 2d points
		
		methods:	Camera()	// constructor, sets camera randomly around point cloud
					loadParameters(paramterFileDirectory)	// load parameters from xml file
					projectFrom3DTo2D()	// already considers distortion, input: pointCloud3D; output: pointCloud2D
					addPixelNoise()	// adds pixel noise to the 2D points
					calcutePoseEstimation()	// calculates the estimated pose with respective PnP algorithm stored in perspectiveNPointAlgorithm
}

struct distortionModel{
		
}

simulation.m{
	// init and visualization
	parameterFileDirectory	// global variable of directory to parameter file
}